---
import '../../../styles/global.css'
import Navigation from '../../../components/navigation.astro';

export async function getStaticPaths() {
  const response = await fetch('http://localhost:1337/api/barangs');
  const productsData = await response.json();

  return productsData.data.map((product) => ({
    params: { id: product.id.toString() },
  }));
}

const { id } = Astro.params;

const response = await fetch(`http://localhost:1337/api/barangs/${id}?populate=image`);
const data = await response.json();
const detailProduct = data.data;

const productId = detailProduct?.id || '';
const productName = detailProduct?.attributes?.nama || 'Product Not Found';
const productSatuan = detailProduct?.attributes?.satuan || 'Satuan Not Found';
const productImage = `http://localhost:1337${detailProduct.attributes.image.data.attributes.url}` || '/path/to/placeholder-image.jpg';
const productPokok = detailProduct?.attributes?.harga_pokok || 0;
const productPrice = detailProduct?.attributes?.harga_satuan || 0;
const productStock = detailProduct?.attributes?.stock || 0;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<meta name="viewport" content="width=device-width" />
	<meta name="generator" content={Astro.generator} />
    <title>Edit dan Hapus {productName}</title>

    <style>
        h1{
            text-align: center;
        }
    </style>
</head>
<body>
    <Navigation></Navigation>
    <div class="container">
        <h1>Edit dan Hapus Data</h1>
    <div class="form-container">
        <form id="addForm">
            <input type="text" name="id" value={productId}>

            <label for="nama">Nama :</label>
            <input type="text" id="nama" name="nama" value={productName} required />

            <label for="satuan">Satuan :</label>
            <input type="text" id="satuan" name="satuan" value={productSatuan} required/>

            <label for="harga_pokok">Harga Pokok :</label>
            <input type="number" id="harga_pokok" name="harga_pokok" value={productPokok} required/>

            <label for="harga_satuan">Harga Satuan :</label>
            <input type="number" id="harga_satuan" name="harga_satuan" value={productPrice} required/>

            <label for="stock">Stock :</label>
            <input type="number" id="stock" name="stock" value={productStock} required />

            <label for="image">Image:</label>
            <img src={productImage} alt={productName} width="150px" height="150px" style="display:block; margin-bottom: 10px;" />
            <input type="file" id="image" name="image" accept="image/*" />

            <div class="button-group">
                <button type="submit">Simpan Perubahan</button>
                <button type="button" id="hapus">Hapus</button>
            </div>
        </form>
    </div>
</div>

    <script>
        document.getElementById('addForm')?.addEventListener('submit', async function(this: HTMLFormElement, e: SubmitEvent) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const id = formData.get('id');
            
            if (typeof id !== 'string') {
                console.error('Invalid ID');
                return;
            }

            let imageId = '';

    // Handle image upload
    const imageFile = formData.get('image') as File;
    if (imageFile && imageFile.size > 0) {
        const imageUploadData = new FormData();
        imageUploadData.append('files', imageFile);

        try {
            const uploadResponse = await fetch('http://localhost:1337/api/upload', {
                method: 'POST',
                body: imageUploadData
            });

            if (!uploadResponse.ok) {
                throw new Error('Image upload failed');
            }

            const uploadResult = await uploadResponse.json();
            imageId = uploadResult[0]?.id || ''; // Get the image ID from the response
        } catch (error) {
            console.error('Error uploading image:', error);
            alert('Failed to upload image. Please try again.');
            return;
        }
    }
    
    
            // Create an object with the form data
            const updateData = {
                data: {
                    nama: formData.get('nama') as string,
                    satuan: formData.get('satuan') as string,
                    harga_pokok: parseFloat(formData.get('harga_pokok') as string),
                    harga_satuan: parseFloat(formData.get('harga_satuan') as string),
                    stock: parseInt(formData.get('stock') as string),
                    image: imageId ? { id: imageId } : undefined
                }
            };
    
            try {
                const response = await fetch(`http://localhost:1337/api/barangs/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData)
                });
    
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
    
                const result = await response.json();
                console.log('Update successful:', result);
                alert('Product updated successfully!');
                window.location.href = '/crud/barang'

    
            } catch (error) {
                console.error('Error updating product:', error);
                alert('Failed to update product. Please try again.');
            }
        });
    

        document.getElementById('hapus')?.addEventListener('click', async function() {
        const formData = new FormData(document.getElementById('addForm') as HTMLFormElement);
        const id = formData.get('id');

        if (typeof id !== 'string') {
            console.error('Invalid ID');
            return;
        }

        if (confirm('Are you sure you want to delete this item?')) {
            try {
                const response = await fetch(`http://localhost:1337/api/barangs/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                console.log('Delete successful');
                alert('Product deleted successfully!');
                window.location.href = '/crud/barang';
            } catch (error) {
                console.error('Error deleting product:', error);
                alert('Failed to delete product. Please try again.');
            }
        }
    });

    </script>
</body>
</html>
